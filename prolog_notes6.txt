length([], 0).
length([H|T], N) :- 
	length(T, M), 
	N is M + 1.

sum([], 0).
sum([H|T], S) :- 
	sum(T, TS), 
	S is H + TS.

% m(M, L). M - всички списъци с елементи от L

% грешно
m([], L).
m([H|T], L) :- 
	member(H, L),
	m(T, L).
% [], [1], [1, 1], [1, 1, 1], ...
% грешно

% генератор на естествени числа
n(0).
n(X) :- 
	n(Y), 
	X is Y + 1.

% m(M, L, N).
% фиксираме дължина и тогава циклим всички списъци
m([], L, 0).
m([H|T], L, N) :- 
	N > 0,
	N1 is N - 1,
	member(H, L),
	m(T, L, N1).

m(M, L) :- 
	n(N), 
	m(M, L, N).


% реалното решение
m([], L).
m([H|T], L) :- 
	m(T, L),
	member(H, L).

% n100(X) - всички естествени числа, по-малки от 100
n100(X) :- 
	n(X),
	X < 100.
% не работи, безкраен генератор, въпреки цикъл.

% between(X, A, B).
between(A, A, B) :- A =< B.
between(X, A, B) :-
	A < B,
	A1 is A + 1,
	between(X, A1, B).

% e(X). - всяко четно число.
e(0).
e(X) :- 
	e(Y),
	X is Y + 2.

or

e(X) :- 
	n(Y),
	X is Y * 2.

or

e(X) :- 
	n(X),
	X mod 2 =:= 0.

% n(X, Y). - всяка двойка естествени числа.
% грешно - двоен безкраен генератор.
n(X, Y) :- n(X), n(Y).

[0, 0], [0, 1], [0, 2], ...
% грешно

n(X, Y) :- 
	n(S),
	between(X, 0, S),
	Y is S - X.

or

n(X, Y) :- 
	n(C),
	decode(C, X, Y).


% f(X) - fibbonacci

% idea
f(n, x, y)
	if(n == 0) return x;
	return f(n - 1, y, x + y);

f(n, 0, 1).
% idea


% solution
f(0, 1).
f(Y, Z) :- 
	f(X, Y),
	Z is X + Y.
% solution


% Homework:
a0 = a1 = a2 = 1
aN+3 = 2*aN + aN+1

p(x) - генератор

